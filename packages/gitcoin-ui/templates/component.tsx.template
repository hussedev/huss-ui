import * as React from 'react';
import { Skeleton } from "@/primitives/Skeleton";
import { tv } from 'tailwind-variants';
import { cn } from "@/lib/utils";
import { match } from "ts-pattern";

const {{componentName}}Variants = tv({
  slots: {
    base: "flex flex-col items-start justify-center gap-4 rounded-lg border border-grey-200 bg-white px-6 py-4",
    content: "flex w-full items-start justify-between",
  },
  variants: {
    variant: {
      primary: "bg-blue-500 text-white",
      secondary: "bg-grey-200 text-grey-900",
    },
  },
});

export interface {{componentName}}Props {
  value: string;
  variant?: 'primary' | 'secondary';
  isLoading?: boolean;
  className?: string;
}

const {{componentName}}Loading: React.FC<Partial<{{componentName}}Props>> = ({ value, variant = 'primary' }) => {
  const { base, content } = {{componentName}}Variants({ variant });

  return (
    <div className={base()}>
      <div className={content()}>
        <Skeleton className="h-4 w-1/6 rounded-md" />
      </div>
    </div>
  );
};

const {{componentName}}State: React.FC<{{componentName}}Props> = ({ value, variant = 'primary', isLoading, className }) => {
  const { base, content } = {{componentName}}Variants({ variant });

  return (
    <div className={cn(base(), className)}>
      <div className={content()}>
        {value}
      </div>
    </div>
  );
};

export const {{componentName}}: React.FC<{{componentName}}Props> = ({ value, variant = 'primary', isLoading, className }) => {
  return match({ isLoading })
    .with({ isLoading: true }, () => <{{componentName}}Loading variant={variant} />)
    .otherwise(() => <{{componentName}}State value={value} variant={variant} className={className} />);
};
